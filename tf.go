package cfft

import (
	"context"
	"encoding/json"
	"fmt"
	"strings"

	"github.com/aws/aws-sdk-go-v2/service/cloudfront/types"
)

type TFCmd struct {
	External bool  `cmd:"" help:"output JSON for external data source"`
	Publish  *bool `cmd:"" help:"set publish flag" default:"false"`
}

type TFJSON struct {
	Comment  string           `json:"//"`
	Variable map[string]TFVar `json:"variable,omitempty"`
	Resource TFCFF            `json:"resource"`
}

type TFVar struct {
	Type        string `json:"type"`
	Default     string `json:"default"`
	Description string `json:"description"`
}

const TFJSONComment = `This file is generated by cfft. DO NOT EDIT.`

type TFCFF struct {
	AWSCloudFrontFunction map[string]TFOutout `json:"aws_cloudfront_function"`
}

type TFOutout struct {
	Name    string                `json:"name"`
	Code    string                `json:"code"`
	Runtime types.FunctionRuntime `json:"runtime"`
	Comment string                `json:"comment"`
	Publish *bool                 `json:"publish,omitempty"`
}

func (app *CFFT) RunTF(ctx context.Context, opt *TFCmd) error {
	code, err := app.config.FunctionCode()
	if err != nil {
		return fmt.Errorf("failed to read function code, %w", err)
	}
	localCode := string(code)
	out := TFOutout{
		Name:    app.config.Name,
		Runtime: app.config.Runtime,
		Comment: app.config.Comment,
	}
	enc := json.NewEncoder(app.stdout)
	enc.SetIndent("", "  ")

	if opt.External {
		// for external data source
		out.Code = localCode
		out.Publish = nil // external data source does not allows boolean value
		return enc.Encode(out)
	} else {
		// output tf.json
		out.Publish = opt.Publish // Publish flag is only for tf.json
		resource := TFJSON{
			Comment: TFJSONComment,
		}
		if strings.Contains(localCode, "${") {
			// local code contains interpolation. use variable to avoid tf template evaluation error
			varName := fmt.Sprintf("code_of_%s", app.config.Name)
			resource.Variable = map[string]TFVar{
				varName: {
					Type:        "string",
					Default:     localCode,
					Description: "CloudFront Function code of " + app.config.Name,
				},
			}
			out.Code = fmt.Sprintf("${var.%s}", varName)
		} else {
			// local code does not contain interpolation. use inline code
			out.Code = localCode
		}
		resource.Resource = TFCFF{
			AWSCloudFrontFunction: map[string]TFOutout{
				app.config.Name: out,
			},
		}
		return enc.Encode(&resource)
	}
}
